---
import Card from "./Card.astro";
interface Project {
  name: string;
  isArchived: boolean;
  homepageUrl: string;
  description?: string | null;
  createdAt: string;
  updatedAt: string;
  url: string;
  latestRelease: { tagName: string } | null;
  languages: { edges: { node: { name: string } }[] };
  repositoryTopics: { edges: { node: { topic: { name: string } } }[] } | null;
}

const response = await fetch("https://api.github.com/graphql", {
  method: "POST",
  headers: {
    "Content-Type": "application/vnd.github+json",
    Authorization: `Bearer ${import.meta.env.GITHUB_ACCESS_TOKEN}`,
  },
  body: JSON.stringify({
    query: `
    {
  user(login: "BostonRohan") {
    pinnedItems(first: 4, types: REPOSITORY) {
      nodes {
        ... on Repository {
          name
          isArchived
          archivedAt
          homepageUrl
          description
          createdAt
          updatedAt
          url
          latestRelease {
            tagName
          }
          languages(first: 3) {
            edges {
              node {
                name
              }
            }
          }
          repositoryTopics(first: 5) {
            edges {
              node {
                topic {
                  name
                }
              }
            }
          }
        }
      }
    }
  }
}
      `,
  }),
});

const json = await response.json();

const projects = json.data.user.pinnedItems.nodes.filter(
  (project: Project) => project.name !== "portfolio"
);
---

<section>
  <h1 class="md:text-3xl text-2xl font-bold dark:text-neutral-50 pt-16">
    Projects
  </h1>
  <p class="text-lg w-fit">
    a few projects I've worked on that haven't been scrapped yet
  </p>
  {projects.map((project: Project) => {
    return (
      <Card
        title={project.name.replaceAll("-", " ")}
        body={project.description}
        stack={project.languages.edges
          .filter(
            (langauge) =>
              //languages come from gh so it includes compiled languages
              langauge.node.name !== "CSS" &&
              langauge.node.name !== "JavaScript"
          )
          .map((language) => language.node.name)}
        links={[
          { type: "demo", href: project.homepageUrl },
          { type: "github", href: project.url },
        ]}
        isArchived={project.isArchived}
      />
    )
  })}
</section>
